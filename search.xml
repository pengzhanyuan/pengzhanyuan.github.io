<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jsonb的遍历</title>
    <url>/json/jsonb%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h1 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h1><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">create table test_jsonb(<span class="hljs-built_in">id</span> serial primary key,msg jsonb);<br>insert <span class="hljs-keyword">into</span> test_jsonb VALUES (<span class="hljs-number">1</span>,&#x27;&#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;bar&quot;</span>&#125;&#x27;);<br>insert <span class="hljs-keyword">into</span> test_jsonb values( <span class="hljs-number">2</span>,&#x27;&#123;<span class="hljs-string">&quot;RootModule&quot;</span>:&#123;<span class="hljs-string">&quot;path&quot;</span>:[<span class="hljs-number">1</span>],<span class="hljs-string">&quot;tags&quot;</span>:&#123;<span class="hljs-string">&quot;ModuleBase1&quot;</span>:&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-number">40640</span>,<span class="hljs-string">&quot;humanstring&quot;</span>:<span class="hljs-string">&quot;40640&quot;</span>&#125;&#125;&#125;&#125;&#x27;);<br><br>my_testdb=<span class="hljs-comment">#  select * from test_jsonb;</span><br> <span class="hljs-built_in">id</span> |                                               msg                                                <br><span class="hljs-comment">----+--------------------------------------------------------------------------------------------------</span><br>  <span class="hljs-number">1</span> | &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>&#125;<br>  <span class="hljs-number">2</span> | &#123;<span class="hljs-string">&quot;RootModule&quot;</span>: &#123;<span class="hljs-string">&quot;path&quot;</span>: [<span class="hljs-number">1</span>], <span class="hljs-string">&quot;tags&quot;</span>: &#123;<span class="hljs-string">&quot;ModuleBase1&quot;</span>: &#123;<span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-number">40640</span>, <span class="hljs-string">&quot;humanstring&quot;</span>: <span class="hljs-string">&quot;40640&quot;</span>&#125;&#125;&#125;&#125;<br>(<span class="hljs-number">2</span> rows)<br></code></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="获取最外层的key-value"><a href="#获取最外层的key-value" class="headerlink" title="获取最外层的key/value"></a>获取最外层的key/value</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">my_testdb=# <span class="hljs-keyword">select</span> id, key, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> test_jsonb,jsonb_each(msg);<br> id |    key     |                                      <span class="hljs-keyword">value</span>                                       <br><span class="hljs-comment">----+------------+----------------------------------------------------------------------------------</span><br>  <span class="hljs-number">1</span> | a          | &quot;foo&quot;<br>  <span class="hljs-number">1</span> | b          | &quot;bar&quot;<br>  <span class="hljs-number">2</span> | RootModule | &#123;&quot;path&quot;: [<span class="hljs-number">1</span>], &quot;tags&quot;: &#123;&quot;ModuleBase1&quot;: &#123;&quot;value&quot;: <span class="hljs-number">40640</span>, &quot;humanstring&quot;: &quot;40640&quot;&#125;&#125;&#125;<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure>
<h1 id="递归获取每一层的key-value"><a href="#递归获取每一层的key-value" class="headerlink" title="递归获取每一层的key/value"></a>递归获取每一层的key/value</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">my_testdb=#  <span class="hljs-keyword">with</span> <span class="hljs-keyword">recursive</span> flat (id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span>) <span class="hljs-keyword">as</span> ( <br>                                    <span class="hljs-keyword">select</span> id, key, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> test_jsonb, jsonb_each(msg)<br>                                    <span class="hljs-keyword">union</span><br>                                    <span class="hljs-keyword">select</span> f.id, concat(f.path, <span class="hljs-string">&#x27;.&#x27;</span>, j.key), j.<span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat f, jsonb_each(f.<span class="hljs-keyword">value</span>) j <span class="hljs-keyword">where</span> jsonb_typeof(f.<span class="hljs-keyword">value</span>) = <span class="hljs-string">&#x27;object&#x27;</span><br>                                    )<br>                            <span class="hljs-keyword">select</span> id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat;<br>                            <br>my_testdb-# <span class="hljs-keyword">select</span> id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat;<br> id |                  <span class="hljs-type">path</span>                   |                                      <span class="hljs-keyword">value</span>                                       <br><span class="hljs-comment">----+-----------------------------------------+----------------------------------------------------------------------------------</span><br>  <span class="hljs-number">1</span> | a                                       | &quot;foo&quot;<br>  <span class="hljs-number">1</span> | b                                       | &quot;bar&quot;<br>  <span class="hljs-number">2</span> | RootModule                              | &#123;&quot;path&quot;: [<span class="hljs-number">1</span>], &quot;tags&quot;: &#123;&quot;ModuleBase1&quot;: &#123;&quot;value&quot;: <span class="hljs-number">40640</span>, &quot;humanstring&quot;: &quot;40640&quot;&#125;&#125;&#125;<br>  <span class="hljs-number">2</span> | RootModule.path                         | [<span class="hljs-number">1</span>]<br>  <span class="hljs-number">2</span> | RootModule.tags                         | &#123;&quot;ModuleBase1&quot;: &#123;&quot;value&quot;: <span class="hljs-number">40640</span>, &quot;humanstring&quot;: &quot;40640&quot;&#125;&#125;<br>  <span class="hljs-number">2</span> | RootModule.tags.ModuleBase1             | &#123;&quot;value&quot;: <span class="hljs-number">40640</span>, &quot;humanstring&quot;: &quot;40640&quot;&#125;<br>  <span class="hljs-number">2</span> | RootModule.tags.ModuleBase1.<span class="hljs-keyword">value</span>       | <span class="hljs-number">40640</span><br>  <span class="hljs-number">2</span> | RootModule.tags.ModuleBase1.humanstring | &quot;40640&quot;<br>(<span class="hljs-number">8</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure>
<h1 id="添加过滤条件"><a href="#添加过滤条件" class="headerlink" title="添加过滤条件"></a>添加过滤条件</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">my_testdb=# <span class="hljs-keyword">with</span> <span class="hljs-keyword">recursive</span> flat (id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span>) <span class="hljs-keyword">as</span> (<br>    <span class="hljs-keyword">select</span> id, key, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> test_jsonb, jsonb_each(msg)<br>    <span class="hljs-keyword">union</span><br>    <span class="hljs-keyword">select</span> f.id, concat(f.path, <span class="hljs-string">&#x27;.&#x27;</span>, j.key), j.<span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat f, jsonb_each(f.<span class="hljs-keyword">value</span>) j<br>    <span class="hljs-keyword">where</span> jsonb_typeof(f.<span class="hljs-keyword">value</span>) = <span class="hljs-string">&#x27;object&#x27;</span>)<br><span class="hljs-keyword">select</span> id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat <span class="hljs-keyword">where</span> <span class="hljs-type">path</span> ~ <span class="hljs-string">&#x27;RootModule.path&#x27;</span>;<br><br> id |      <span class="hljs-type">path</span>       | <span class="hljs-keyword">value</span> <br><span class="hljs-comment">----+-----------------+-------</span><br>  <span class="hljs-number">2</span> | RootModule.path | [<span class="hljs-number">1</span>]<br>(<span class="hljs-number">1</span> <span class="hljs-keyword">row</span>)<br><br><br><br>my_testdb=# <span class="hljs-keyword">with</span> <span class="hljs-keyword">recursive</span> flat (id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span>) <span class="hljs-keyword">as</span> (<br>    <span class="hljs-keyword">select</span> id, key, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> test_jsonb, jsonb_each(msg)<br>    <span class="hljs-keyword">union</span><br>    <span class="hljs-keyword">select</span> f.id, concat(f.path, <span class="hljs-string">&#x27;.&#x27;</span>, j.key), j.<span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat f, jsonb_each(f.<span class="hljs-keyword">value</span>) j<br>    <span class="hljs-keyword">where</span> jsonb_typeof(f.<span class="hljs-keyword">value</span>) = <span class="hljs-string">&#x27;object&#x27;</span><br>    )<br><span class="hljs-keyword">select</span> id, <span class="hljs-type">path</span>, <span class="hljs-keyword">value</span> <span class="hljs-keyword">from</span> flat <span class="hljs-keyword">where</span> <span class="hljs-type">path</span> ~ <span class="hljs-keyword">any</span>(<span class="hljs-keyword">array</span>[<span class="hljs-string">&#x27;humanstring&#x27;</span>,<span class="hljs-string">&#x27;RootModule.path&#x27;</span>]);<br><br>id |                  <span class="hljs-type">path</span>                   |  <span class="hljs-keyword">value</span>  <br><span class="hljs-comment">----+-----------------------------------------+---------</span><br>  <span class="hljs-number">2</span> | RootModule.path                         | [<span class="hljs-number">1</span>]<br>  <span class="hljs-number">2</span> | RootModule.tags.ModuleBase1.humanstring | &quot;40640&quot;<br>(<span class="hljs-number">2</span> <span class="hljs-keyword">rows</span>)<br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>json</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>jsonb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
